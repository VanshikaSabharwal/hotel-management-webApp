"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(cms)/studio/[[...index]]/page",{

/***/ "(app-pages-browser)/./sanity.config.ts":
/*!**************************!*\
  !*** ./sanity.config.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var sanity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sanity */ \"(app-pages-browser)/./node_modules/sanity/lib/index.mjs\");\n/* harmony import */ var sanity_structure__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sanity/structure */ \"(app-pages-browser)/./node_modules/sanity/lib/_chunks-es/pane.mjs\");\n/* harmony import */ var _sanity_vision__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sanity/vision */ \"(app-pages-browser)/./node_modules/@sanity/vision/lib/_chunks-es/index.mjs\");\n/* harmony import */ var _schemaTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../schemaTypes */ \"(app-pages-browser)/../schemaTypes/index.ts\");\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((0,sanity__WEBPACK_IMPORTED_MODULE_1__.defineConfig)({\n    name: \"default\",\n    title: \"hotel-management\",\n    projectId: \"h999c1a0\",\n    dataset: \"production\",\n    basePath: \"/studio\",\n    plugins: [\n        (0,sanity_structure__WEBPACK_IMPORTED_MODULE_2__.structureTool)(),\n        (0,_sanity_vision__WEBPACK_IMPORTED_MODULE_3__.visionTool)()\n    ],\n    schema: {\n        types: _schemaTypes__WEBPACK_IMPORTED_MODULE_0__.schemaTypes\n    }\n}));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3Nhbml0eS5jb25maWcudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBc0M7QUFDVztBQUNMO0FBQ0M7QUFFN0MsK0RBQWVBLG9EQUFZQSxDQUFDO0lBQzFCSSxNQUFNO0lBQ05DLE9BQU87SUFFUEMsV0FBVztJQUNYQyxTQUFTO0lBQ1RDLFVBQVU7SUFFVkMsU0FBUztRQUFDUiwrREFBYUE7UUFBSUMsMERBQVVBO0tBQUc7SUFFeENRLFFBQVE7UUFDTkMsT0FBT1IscURBQVdBO0lBQ3BCO0FBQ0YsRUFBRSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3Nhbml0eS5jb25maWcudHM/NjlmNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tIFwic2FuaXR5XCI7XHJcbmltcG9ydCB7IHN0cnVjdHVyZVRvb2wgfSBmcm9tIFwic2FuaXR5L3N0cnVjdHVyZVwiO1xyXG5pbXBvcnQgeyB2aXNpb25Ub29sIH0gZnJvbSBcIkBzYW5pdHkvdmlzaW9uXCI7XHJcbmltcG9ydCB7IHNjaGVtYVR5cGVzIH0gZnJvbSBcIi4uL3NjaGVtYVR5cGVzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xyXG4gIG5hbWU6IFwiZGVmYXVsdFwiLFxyXG4gIHRpdGxlOiBcImhvdGVsLW1hbmFnZW1lbnRcIixcclxuXHJcbiAgcHJvamVjdElkOiBcImg5OTljMWEwXCIsXHJcbiAgZGF0YXNldDogXCJwcm9kdWN0aW9uXCIsXHJcbiAgYmFzZVBhdGg6IFwiL3N0dWRpb1wiLFxyXG5cclxuICBwbHVnaW5zOiBbc3RydWN0dXJlVG9vbCgpLCB2aXNpb25Ub29sKCldLFxyXG5cclxuICBzY2hlbWE6IHtcclxuICAgIHR5cGVzOiBzY2hlbWFUeXBlcyxcclxuICB9LFxyXG59KTtcclxuIl0sIm5hbWVzIjpbImRlZmluZUNvbmZpZyIsInN0cnVjdHVyZVRvb2wiLCJ2aXNpb25Ub29sIiwic2NoZW1hVHlwZXMiLCJuYW1lIiwidGl0bGUiLCJwcm9qZWN0SWQiLCJkYXRhc2V0IiwiYmFzZVBhdGgiLCJwbHVnaW5zIiwic2NoZW1hIiwidHlwZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./sanity.config.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/../schemaTypes/index.ts":
/*!*******************************!*\
  !*** ../schemaTypes/index.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   schemaTypes: function() { return /* binding */ schemaTypes; }\n/* harmony export */ });\nconst schemaTypes = [];\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9zY2hlbWFUeXBlcy9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsY0FBYyxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9zY2hlbWFUeXBlcy9pbmRleC50cz83NzQ2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBzY2hlbWFUeXBlcyA9IFtdXG4iXSwibmFtZXMiOlsic2NoZW1hVHlwZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../schemaTypes/index.ts\n"));

/***/ })

});